if has('nvim')
    let s:editor_root=expand("~/.config/nvim")

    tnoremap <Esc> <C-\><C-n>
else
    let s:editor_root=expand("~/.vim")
endif
set autoread " Reloads when buffer is stale
noremap ; h
noremap q l

" Nvim navigation between windows, exiting terminal
" ;qjk -> …œ∆˚
tnoremap <M-;> <C-\><C-n><C-w>h
tnoremap <M-j> <C-\><C-n><C-w>j
tnoremap <M-k> <C-\><C-n><C-w>k
tnoremap <M-q> <C-\><C-n><C-w>l
nnoremap <M-;> <C-w>h
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-q> <C-w>l
" tnoremap … <C-\><C-n><C-w>h
" tnoremap ∆ <C-\><C-n><C-w>j
" tnoremap ˚ <C-\><C-n><C-w>k
" tnoremap œ <C-\><C-n><C-w>l
" nnoremap … <C-w>h
" nnoremap ∆ <C-w>j
" nnoremap ˚ <C-w>k
" nnoremap œ <C-w>l

" Previous Buffer
noremap <F7> <C-^>

" set a map leader for more key combos
let mapleader=","       " leader is comma

set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,WinEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,WinLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

" Remove whitespace on save
autocmd BufWritePre * %s/\s\+$//e

" Hide line numbers on terminal open
augroup TerminalStuff
  autocmd!
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

set nowrap

" Improved indentation on newline - Use f2 to disable this for paste purposes
set autoindent
set smartindent

" Tab control
" set expandtab               " insert tabs rather than spaces for <Tab>
" set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4                 " the visible width of tabs
" set softtabstop=2           " edit as if the tabs are 4 characters wide
set shiftwidth=4              " number of spaces to use for indent and unindent
" set shiftround              " round indent to a multiple of 'shiftwidth'
" set completeopt+=longest
set pastetoggle=<F2>
set nofixendofline

" code folding settings
set foldmethod=indent       " fold based on indent
set foldnestmax=10          " deepest fold is 10 levels
set nofoldenable            " don't fold by default
set foldlevel=2

" set default yank/copy/delete buffer to be system clipboard
set clipboard=unnamed

" Searching
set ignorecase              " case insensitive searching
set smartcase               " case-sensitive if expresson contains a capital letter
set hlsearch                " highlight search results
set incsearch               " set incremental search, like modern browsers
set nolazyredraw            " don't redraw while executing macros

if !has('nvim')
    nnoremap <F5> :buffers<CR>:buffer<Space>
else
    nnoremap <F5> :buffer<Space>
endif

autocmd BufWritePost *.cpp :TlistUpdate

" shortcut to save
nmap U :redo<cr>
" Set colours
syntax on                   " switch syntax highlighting on

set t_Co=256                " Explicitly tell vim that the terminal supports 256 colors"
set background=dark

" set line the cursor is on to be highlighted
set cursorline

" make comments and HTML attributes italic
highlight htmlArg cterm=italic
filetype off                  " required

" airline
set laststatus=2
set ttimeoutlen=50


"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('$HOME/.cache/dein')
  call dein#begin('$HOME/.cache/dein')

  " Let dein manage dein
  " Required:
  call dein#add('$HOME/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
  " call dein#add('Shougo/neosnippet.vim')
  " call dein#add('Shougo/neosnippet-snippets')
  " call dein#add('Shougo/deoplete.nvim')

  " Nerdtree
  call dein#add('scrooloose/nerdtree')
  call dein#add('Xuyuanp/nerdtree-git-plugin')

  " Git blame, etc
  call dein#add('tpope/vim-fugitive')

  " Python linter
  "call dein#add('nvie/vim-flake8')

  " Python
  " call dein#add('neovim/python-client', {'on_ft': 'python'})
  " call dein#add('davidhalter/jedi', {'on_ft': 'python'})
  " call dein#add('zchee/deoplete-jedi', {'on_ft': 'python'})

  " Ruby
  " call dein#add('fishbullet/deoplete-ruby')

  " Scala
  " call dein#add('derekwyatt/vim-scala')

  " Conquer of completion
  call dein#add('neoclide/coc.nvim', { 'merged': 0 })


  " You can specify revision/branch/tag.
  call dein#add('Shougo/vimshell', { 'rev': '3787e5' })

  " Fuzzy search, consider replacing with fzf
  call dein#add('ctrlpvim/ctrlp.vim')
  call dein#add('mileszs/ack.vim')


  " GUI
  call dein#add('vim-airline/vim-airline')

  " Golang
  call dein#add('fatih/vim-go', {'on_ft': 'go'})		" go get -u golang.org/x/tools/...

  " Assorted highlighting of languas
  call dein#add('sheerun/vim-polyglot')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

if dein#check_install()
  call dein#install()
endif
" neocomplete like
" set completeopt+=noinsert
" deoplete.nvim recommend
" set completeopt+=noselect
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"


"End dein Scripts-------------------------
" Hide linenumbers in terminal -------------------------------------------------

"
"
"  " -------- Python plugins -------- "
"  Plugin 'scrooloose/syntastic'
"  Plugin 'nvie/vim-flake8'
"
"  " -------- Go plugins -------- "
 " Solarized
 " cd ~/.vim/bundle
 " git clone git://github.com/altercation/vim-colors-solarized.git
 " mv vim-colors-solarized ~/.vim/bundle


syntax enable
set background=dark
colorscheme Solarized

set backspace=indent,eol,start
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set grepprg=Ack

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" ------------------------ Nerd Tree Settings ------------------------ "
"

" NERDtree - git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree
" :help NERD_tree.txt
let g:NERDTreeWinSize=35
let g:NERDTreeWinPos = "left"
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" 'Hide nerdtree if not dir
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
map <C-n> :NERDTreeToggle<CR>

" airline

" you complete me - Requires compiling and a bunch of work.
"let g:ycm_allow_changing_updatetime = 1         " leave my updatetime alone
"let g:ycm_collect_identifiers_from_tags_files = 1
" set completeopt="menu"                          " remove preview from completeopt

" ------------------------ Go def stuff ------------------------ "
" Deoplete go settings
" Path to python interpreter for neovim
" :GoInstallBinaries to update godoc, goimports etc
let g:python3_host_prog  = '/usr/local/bin/python3'
" " Skip the check of neovim module
let g:python3_host_skip_check = 1
"
" " Run deoplete.nvim automatically
" let g:deoplete#enable_at_startup = 1
" " deoplete-go settings
" let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
" let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
" let g:deoplete#sources#go#use_cache = 1
" let g:deoplete#sources#go#json_directory = '~/.nvim/cache/gocode'

 let g:go_highlight_build_constraints = 1

" let g:go_auto_type_info = 1
" let g:go_def_mode  ='gopls' "go get -u golang.org/x/tools/... to update
" let g:go_info_mode ='gopls'
" let g:go_fmt_command = "goimports"

" Run gofmt on save
" autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
" ------------------------------- experimental golang stuff -----------------

let g:go_def_mapping_enabled = 0
" nmap <silent> <Enter> <Plug>(coc-definition)
nmap <silent> <Leader>r <Plug>(coc-references)
nmap <silent> <Leader>f <Plug>(coc-fix-current)

" ------------------------------ Coc settings ------------------------------ "
"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> <F1> :call <SID>show_documentation()<CR>
nnoremap <silent> <F3> :CocDiagnostics<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)


nmap <leader>t :GoTestFunc<CR>

" json comments for jsonc
autocmd FileType json syntax match Comment +\/\/.\+$+

" ------------------------ Airline settings ------------------------ "
"
set laststatus=2
set noshowmode
set ttimeoutlen=50
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '
let g:airline#extensions#tabline#buffer_nr_show = 1

"
" ------------------------ Python stuff ------------------------ "
"

let python_highlight_all=1

au FileType py,python setlocal tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent fileformat=unix

autocmd FileType ruby,html,css,yaml,yml,erb,json,ejson,yml.erb setlocal expandtab shiftwidth=2 tabstop=2 fileformat=unix autoindent

"
" ------------------------ CtrlP stuff ------------------------ "
" :help ctrlp.txt
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_switch_buffer = 't'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$\|vendor',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" ------------------------ Html stuff ------------------------ "
"

"tmuxline
let g:tmuxline_powerline_separators = 0

" set git gutter to update faster
set updatetime=100
let g:gitgutter_sign_column_always = 1

" set ruby to not do expensive syntax highlighting
let ruby_no_expensive=1

" Use silver_searcher if it is installed
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif


" Mouse stuff
set mouse=a
if has('mouse_sgr')
    set ttymouse=sgr
endif
