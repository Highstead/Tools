" ------------------------------------------------------------------------------
"  Vim - Tips and tricks
" ------------------------------------------------------------------------------
" F2 - Enables paste mode


noremap ; h
noremap q l
noremap j k
noremap k j

if has('nvim')
    tnoremap <Esc> <C-\><C-n>
endif

" set a map leader for more key combos
let mapleader="'"       " leader is apostraphe

set number
set nowrap

" Improved indentation on newline - Use f2 to disable this for paste purposes
set autoindent
set smartindent

" Tab control
set expandtab               " insert tabs rather than spaces for <Tab>
set smarttab                " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4               " the visible width of tabs
set softtabstop=4           " edit as if the tabs are 4 characters wide
set shiftwidth=4            " number of spaces to use for indent and unindent
set shiftround              " round indent to a multiple of 'shiftwidth'
set completeopt+=longest
set pastetoggle=<F2>

" code folding settings
set foldmethod=indent       " fold based on indent
set foldnestmax=10          " deepest fold is 10 levels
set nofoldenable            " don't fold by default
set foldlevel=2

" set default yank/copy/delete buffer to be system clipboard
set clipboard=unnamed

" Searching
set ignorecase              " case insensitive searching
set smartcase               " case-sensitive if expresson contains a capital letter
set hlsearch                " highlight search results
set incsearch               " set incremental search, like modern browsers
set nolazyredraw            " don't redraw while executing macros

nnoremap <F5> :buffers<CR>:buffer<Space>
autocmd BufWritePost *.cpp :TlistUpdate

" shortcut to save
nmap <leader>\ :w<cr>
nmap U :redo<cr>
" Set colours
syntax on                   " switch syntax highlighting on

set t_Co=256                " Explicitly tell vim that the terminal supports 256 colors"
set background=dark

" set line the cursor is on to be highlighted
set cursorline

" make comments and HTML attributes italic
highlight htmlArg cterm=italic
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" airline
set laststatus=2
set ttimeoutlen=50

"
" ------------------------------ Plugin section  ---------------------------
"
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

" Set Vundle to use ssh
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" extend fugitive with better branch and commit views
Plugin 'gregsexton/gitv'

" git gutter
Plugin 'airblade/vim-gitgutter'

" comment stuff out
Plugin 'tpope/vim-commentary' 

" misc functions for plugins
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'

" browse tags in the current file
Plugin 'majutsushi/tagbar'

" allow easy surrouding
Plugin 'tpope/vim-surround'

" all comma objects to be a real object
Plugin 'austintaylor/vim-commaobject'

" airline
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'

" nerdtree
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'jistr/vim-nerdtree-tabs'

" Ctrl-p - file finder
Plugin 'ctrlpvim/ctrlp.vim'

" Buffergator (leader-b to display a list of buffers)
Plugin 'jeetsukumaran/vim-buffergator'

" Ack.Vim - ack tool (Searches contents of files really quickly)
" Suggest installing alongside ag.
Plugin 'mileszs/ack.vim'

" indent/python
Plugin 'vim-scripts/indentpython.vim'

" Powerline - encoding, vertualenv, git branch etc
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

" Code completion
" On servers, probably want to use ervandew/supertab since it's 
"   more lightweight and doesn't require compilations
Plugin 'Valloric/YouCompleteMe'

" -------- Python plugins -------- "
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'

" -------- Go plugins -------- "
Plugin 'dgryski/vim-godef'
Plugin 'fatih/vim-go'

" Solarized
" cd ~/.vim/bundle
" git clone git://github.com/altercation/vim-colors-solarized.git
" mv vim-colors-solarized ~/.vim/bundle
syntax enable
set background=dark
colorscheme Solarized
set mouse=a

" All of your Plugins must be added before the following line
call vundle#end()            " required

set backspace=indent,eol,start
set tabstop=4
set softtabstop=4
set expandtab           " tabs are spaces
set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set grepprg=Ack


filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
let g:vundle_default_git_proto = 'git'

" -------------------- You complete me shenanigans ------------------"

" ------------------------ Nerd Tree Settings ------------------------ "
"

" NERDtree - git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree
" :help NERD_tree.txt
let g:NERDTreeWinSize=30
let g:NERDTreeWinPos = "left"
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

" 'Hide nerdtree if not dir
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
map <C-n> :NERDTreeToggle<CR>

" airline
set laststatus=2
set ttimeoutlen=50
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '

" you complete me - Requires compiling and a bunch of work. 
let g:ycm_allow_changing_updatetime = 1         " leave my updatetime alone
let g:ycm_collect_identifiers_from_tags_files = 1
set completeopt="menu"                          " remove preview from completeopt

" ------------------------ Go def stuff ------------------------ "
"
" au FileType go nmap <leader>t <Plug>(go-test)

au FileType go nmap gd <Plug>(go-def-split)
au FileType go nmap gv <Plug>(go-def-vertical)
au FileType go nmap <F11> <Plug>(go-def-tab)

au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

" ------------------------ Airline settings ------------------------ "
" 
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ' '

" you complete me - Requires compiling and a bunch of work. 
let g:ycm_allow_changing_updatetime = 1         " leave my updatetime alone
let g:ycm_collect_identifiers_from_tags_files = 1
" set completeopt="menu"                          " remove preview from completeopt


"
" ------------------------ Python stuff ------------------------ "
"

let python_highlight_all=1

au FileType py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

"
" ------------------------ CtrlP stuff ------------------------ "
" :help ctrlp.txt
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('ag')
      let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  endif

" ------------------------ Html stuff ------------------------ "
"

"tmuxline
let g:tmuxline_powerline_separators = 0

" set git gutter to update faster
set updatetime=100
let g:gitgutter_sign_column_always = 1

" set ruby to not do expensive syntax highlighting 
let ruby_no_expensive=1

" Set easytags to use project-dependent tags
set tags=./.tags;,~/.vimtags

"Set easytags to compile go-tags
let g:easytags_languages = {
    \   'language': {
    \     'go': 'gotags',
    \       'fileoutput_opt': '-f',
    \       'stdout_opt': '-f-',
    \       'recurse_flag': '-R'
    \   }
    \}

"Tagbar Options

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" Use silver_searcher if it is installed 
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
